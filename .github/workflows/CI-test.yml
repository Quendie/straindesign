# This workflow will reformat all python files with yapf

name: CI-test

on:
#  push:
#    branches:
#      - main
  workflow_dispatch:


permissions:
  contents: read

jobs:
  build_and_test:
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash -l {0}
    strategy:
      matrix:
        os: [ubuntu-latest]
        python-version: ['3.10']
        package-manager: ['pip', 'conda', 'conda_env']
    steps:
      - uses: actions/checkout@v3
      - name: Cache Conda packages
        uses: actions/cache@v2
        with:
          path: |
            ~/conda_pkgs_dir
          key: ${{ runner.os }}-conda-${{ hashFiles('**/environment.yml') }}
          restore-keys: |
            ${{ runner.os }}-conda-
      - name: Cache pip packages
        uses: actions/cache@v2
        with:
          path: |
            ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}
      - name: Edit environment file to fix python version (conda environment test)
        if: matrix.package-manager == 'conda_env'
        run: sed -i "s/python/python=${{ matrix.python-version }}/g" environment.yml
      - name: Set up Conda Environment with Micromamba (conda environment test)
        if: matrix.package-manager == 'conda_env'
        uses: mamba-org/setup-micromamba@v1
        with:
          environment-file: environment.yml
          package-specs: python=${{ matrix.python-version }} 
          post-cleanup: 'all'
      - name: Build for PyPI (if pip)
        if: matrix.package-manager == 'pip'
        run: |
          pip install setuptools wheel
          python setup.py sdist bdist_wheel
      - name: Install package using pip
        if: matrix.package-manager == 'pip'
        run: pip install ./dist/*.whl
      - name: Install gurobi (pip)
        if: matrix.package-manager == 'pip'
        run: |
          pip install gurobipy
      - name: Install cplex (pip)
        if: matrix.package-manager == 'pip'
        run: |
          pip install cplex
      - name: Install pytest (pip)
        if: matrix.package-manager == 'pip'
        run: |
          pip install pytest
      - name: Set up Conda Environment with Micromamba
        if: matrix.package-manager == 'conda'
        uses: mamba-org/setup-micromamba@v1
        with:
          environment-name: straindesign
          micromamba-version: latest
          package-specs: python=${{ matrix.python-version }} 
          post-cleanup: 'all'
      - name: Activate Micromamba environment
        if: matrix.package-manager == 'conda'
        run: |
          echo "source $(micromamba shell hook --shell bash)" >> $GITHUB_ENV
          micromamba activate straindesign
      - name: Build for Conda (if conda)
        if: matrix.package-manager == 'conda'
        run: |
          micromamba install anaconda-client conda-build conda-verify
          run: rm -rf conda-bld
          micromamba build conda-recipe/. -c conda-forge --croot conda-bld
      - name: Install package using conda
        if: matrix.package-manager == 'conda'
        run: |
          micromamba install --use-local /home/runner/work/straindesign/straindesign/conda-bld/noarch/straindesign-*.tar.bz2
      - name: Install gurobi (conda)
        if: matrix.package-manager == 'conda'
        run: |
          micromamba install -c gurobi gurobi
      - name: Install cplex (conda)
        if: matrix.package-manager == 'conda'
        run: |
          micromamba install -c ibmdecisionoptimization cplex
      - name: Install scip (conda)
        if: matrix.package-manager == 'conda'
        run: |
          micromamba install -c conda-forge pyscipopt scip=8.0.0
      - name: Install pytest (conda)
        if: matrix.package-manager == 'conda'
        run: |
          micromamba install pytest
      - name: Test with pytest
        if: matrix.package-manager == 'conda' || matrix.package-manager == 'pip'
        run: pytest tests
        